datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum Platform {
  VERCEL
}

model Region {
  id       String   @id
  name     String
  platform Platform
  region   String

  url String @unique

  endpoints Endpoint[]
  Check     Check[]

  @@unique([platform, region])
}

// model Deployment {
//   region Region @relation(fields: [platform, region], references: [platform, region])
//   platform String
//   region String

//   Endpoint   Endpoint? @relation(fields: [endpointId], references: [id])
//   endpointId String?
// }

model Endpoint {
  id        String   @id
  method    Method
  name      String?
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Interval in milliseconds
  interval      Int
  active        Boolean
  // Milliseconds
  degradedAfter Int?
  failedAfter   Int?
  regions       Region[]
  // json encoded map
  headers       Json?
  body          String?

  StatusPage   StatusPage? @relation(fields: [statusPageId], references: [id])
  statusPageId String?
  checks       Check[]
}

model StatusPage {
  id        String     @id
  slug      String     @unique
  name      String
  endpoints Endpoint[]
}

model User {
  // This id provided by clerk
  id    String       @id
  teams Membership[]
}

model Team {
  id String @id

  name String
  slug String @unique

  stripeCustomerId                String @unique
  stripeCurrentBillingPeriodStart Int

  // milliseconds
  retention Int

  members   Membership[]
  endpoints Endpoint[]

  @@index([slug])
}

enum Role {
  PERSONAL
  OWNER
  ADMIN
  FINANCE
  READ
  READWRITE
}

model Membership {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  teamId String
  role   Role

  @@id([userId, teamId])
}

model Check {
  id         String   @id
  endpoint   Endpoint @relation(fields: [endpointId], references: [id])
  endpointId String
  latency    Int
  time       DateTime
  status     Int
  region     Region   @relation(fields: [regionId], references: [id])
  regionId   String

  @@index([endpointId])
}
