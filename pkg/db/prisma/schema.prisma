datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Token {
  id        String @id
  tokenHash String @unique

  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  expires DateTime?

  permissions Json
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum Platform {
  vercel
  aws
}

model Region {
  id       String   @id
  name     String
  platform Platform
  region   String

  // Url where the lambda function for this region is reachable
  url       String     @unique
  endpoints Endpoint[]

  @@unique([platform, region])
}

// model Deployment {
//   region Region @relation(fields: [platform, region], references: [platform, region])
//   platform String
//   region String

//   Endpoint   Endpoint? @relation(fields: [endpointId], references: [id])
//   endpointId String?
// }

enum Distribution {
  // Each check triggers 1 random region
  RANDOM

  // Each check triggers all selected regions
  ALL
}

model Endpoint {
  id        String   @id
  method    Method
  name      String?
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Interval in milliseconds
  interval      Int
  active        Boolean
  // Milliseconds
  degradedAfter Int?

  // Timeout after which we cancel the request
  // This counts as a failed request
  timeout      Int?
  distribution Distribution
  // string[] of region Ids
  regions      Region[]
  // json encoded map
  // { KEY: VALUE}
  headers      Json?
  body         String?

  assertions Json?

  statusPages StatusPage[]
  checks      Check[]
}

model VerificationRequest {
  // usually email
  identifier String
  otp        String
  expires    DateTime

  createdAt DateTime @default(now())

  @@unique([identifier, otp])
}

model StatusPage {
  id        String     @id
  slug      String     @unique
  name      String
  endpoints Endpoint[]
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
}

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id     String  @id
  name   String
  email  String  @unique
  image  String?
  tokens Token[]

  teams Membership[]
}

enum Plan {
  DISABLED // teams can not be free and are therefore disabled
  FREE // only when a user removes their subscription
  PERSONAL // No flat fee, just pay as you go
  PRO // With teams and other goodies, with flat fee + payg
  ENTERPRISE
}

model Team {
  id       String  @id
  plan     Plan
  personal Boolean

  name String
  slug String @unique

  stripeCustomerId                String    @unique
  stripeSubscriptionId            String?   @unique
  stripeCurrentBillingPeriodStart DateTime?
  stripeCurrentBillingPeriodEnd   DateTime?
  stripeTrialExpires              DateTime?

  members     Membership[]
  endpoints   Endpoint[]
  statusPages StatusPage[]

  // QUOTA DEFINITIONS 
  // How long checks are displayed
  // we always store at least 1 month for billing
  retention Int // [milliseconds]

  // How many checks may be done per month
  maxMonthlyRequests Int
  maxEndpoints       Int
  minInterval        Int // [milliseconds]
  maxTimeout         Int // [milliseconds]

  @@index([slug])
}

enum Role {
  OWNER
  ADMIN
  FINANCE
  READ
  READWRITE
}

model Membership {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  role   Role

  @@id([userId, teamId])
}

model Check {
  id         String   @id
  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  endpointId String
  latency    Int?
  time       DateTime

  // Populated if there is an error, like assertion error or timeout
  error  String?
  // The HTTP response status
  status Int?
  // Raw http response body
  body   String?

  // http response headers as {key: value} object
  headers  Json?
  regionId String

  @@index([endpointId])
}
