datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

enum Action {
  READ
  WRITE
}

model Token {
  id        String @id
  tokenHash String @unique

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  expires DateTime

  endpoints Action?
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum Platform {
  VERCEL
  AWS
}

model Region {
  id       String   @id
  name     String
  platform Platform
  region   String

  url String @unique

  @@unique([platform, region])
}

// model Deployment {
//   region Region @relation(fields: [platform, region], references: [platform, region])
//   platform String
//   region String

//   Endpoint   Endpoint? @relation(fields: [endpointId], references: [id])
//   endpointId String?
// }

model Endpoint {
  id        String   @id
  method    Method
  name      String?
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Interval in milliseconds
  interval      Int
  active        Boolean
  // Milliseconds
  degradedAfter Int?
  failedAfter   Int?
  regions       Json
  // json encoded map
  headers       Json?
  body          String?

  statusPages StatusPage[]
  checks      Check[]
}

model VerificationRequest {
  // usually email
  identifier String
  otp        String
  expires    DateTime

  createdAt DateTime @default(now())

  @@unique([identifier, otp])
}

model StatusPage {
  id        String     @id
  slug      String     @unique
  name      String
  endpoints Endpoint[]
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
}

model User {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  id     String  @id
  name   String
  email  String  @unique
  image  String?
  tokens Token[]

  teams Membership[]
}

enum Plan {
  DISABLED // teams can not be free and are therefore disabled
  FREE // only possible for personal teams
  PRO
  ENTERPRISE
}

model Team {
  id   String @id
  plan Plan

  // Personal teams must not have any other members and are the only teams available for FREE tier
  personal Boolean
  name     String
  slug     String  @unique

  stripeCustomerId                String    @unique
  stripeSubscriptionId            String?   @unique
  stripeCurrentBillingPeriodStart DateTime?
  stripeCurrentBillingPeriodEnd   DateTime?
  stripeTrialExpires              DateTime?

  members     Membership[]
  endpoints   Endpoint[]
  statusPages StatusPage[]

  // QUOTA DEFINITIONS 
  // How long checks are stored
  retention Int // [days]

  // How many checks may be done per month
  maxMonthlyRequests Int?

  @@index([slug])
}

enum Role {
  OWNER
  ADMIN
  FINANCE
  READ
  READWRITE
}

model Membership {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String
  role   Role

  @@id([userId, teamId])
}

model Check {
  id         String   @id
  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade)
  endpointId String
  latency    Int
  time       DateTime
  status     Int
  regionId   String

  @@index([endpointId])
}
