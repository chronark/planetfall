datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id             String       @id
  name           String
  email          String       @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  teams          Membership[]
  createdAt      DateTime     @default(now())
  usageUpdatedAt DateTime     @default(now())

  teamInvitations TeamInvitation[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Used for authentication
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Token {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Fetch token by a clerk session id
  name      String
  hash      String   @id

  userId  String
  expires DateTime?

  permissions String
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum MemberRole {
  OWNER
  ADMIN
  MEMBER
}

model Membership {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String

  role MemberRole

  @@id([userId, teamId])
}

enum Plan {
  DISABLED // non-personal teams can not be free and are therefore disabled
  FREE // for new personal teams
  PRO // No flat fee, just pay as you go
  ENTERPRISE
}

model Team {
  id         String   @id
  isPersonal Boolean
  name       String
  slug       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  members Membership[]

  plan Plan

  stripeCustomerId                String?   @unique
  stripeSubscriptionId            String?   @unique
  stripeCurrentBillingPeriodStart DateTime?
  stripeCurrentBillingPeriodEnd   DateTime?
  stripeTrialExpires              DateTime?

  invitations TeamInvitation[]

  // When the user deletes a team it is marked as deactivated until all billing is done
  deactivatedAt DateTime?

  // QUOTA DEFINITIONS 
  // How long checks are displayed
  // we always store at least 1 month for billing
  retention Int // [milliseconds]

  // How many checks may be done per month
  maxMonthlyRequests Int
  maxEndpoints       Int
  minInterval        Int // [milliseconds]
  maxTimeout         Int // [milliseconds]
  endpoints          Endpoint[]
  pages              StatusPage[]

  webhookAlerts WebhookAlert[]

  @@index([slug])
}

enum Platform {
  vercel
  vercelEdge
  aws
  flyRedis
}

model Region {
  id       String   @id
  name     String
  platform Platform
  region   String

  // Url where the lambda function for this region is reachable
  url       String
  endpoints Endpoint[]
  visible   Boolean

  @@unique([platform, region])
}

model TeamInvitation {
  id        String   @id
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expires   DateTime

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?

  @@unique([teamId, userId])
}

// model Deployment {
//   region Region @relation(fields: [platform, region], references: [platform, region])
//   platform String
//   region String

//   Endpoint   Endpoint? @relation(fields: [endpointId], references: [id])
//   endpointId String?
// }

enum Distribution {
  // Each check triggers 1 random region
  RANDOM

  // Each check triggers all selected regions
  ALL
}

model Endpoint {
  id        String   @id
  method    Method
  name      String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Interval in milliseconds
  interval      Int
  active        Boolean
  // Milliseconds
  degradedAfter Int?

  // Timeout after which we cancel the request
  // This counts as a failed request
  timeout      Int?
  distribution Distribution
  // string[] of region Ids
  regions      Region[]
  // json encoded map
  // { KEY: VALUE}
  headers      Json?
  body         String?

  assertions String?

  pages StatusPage[]

  @@index([teamId])
}

model VerificationRequest {
  // usually email
  identifier String
  otp        String
  expires    DateTime

  createdAt DateTime @default(now())

  @@unique([identifier, otp])
}

model StatusPage {
  id        String     @id
  slug      String     @unique
  name      String
  endpoints Endpoint[]
  teamId    String
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([teamId])
}

model WebhookAlert {
  id     String @id
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  url        String
  signingKey String
  active     Boolean

  @@index([teamId])
}
